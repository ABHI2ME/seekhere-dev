version : '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seekhere-backend
    env_file:
      - ./.env
    ports:
      - "${PORT:-5000}:5000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - postgres
    networks:
      - my-network
  redis:
    image: "redis:8-alpine" 
    container_name: redis
    ports:
      - "6379:6379" 
    volumes:
      - redis-data:/data
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:29093"
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - my-network
  postgres:
    image: postgres:17-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-abhi}
      - POSTGRES_USER=${POSTGRES_USER:-abhi}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-abhi}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-network

volumes:
  postgres_data:
  redis-data:
  kafka-data:
    driver: local

networks:
  my-network:
    driver: bridge

